@Library('my-shared-library') _

pipeline{
    agent any

    parameters{
        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/destroy')
        string(name: 'cluster', description: "name of the EKS Cluster", defaultValue: 'demo-cluster1')
    }

    stages{

        stage('Git Checkout'){
        when { expression { params.action == 'create'}}
            steps{
                script{
                    gitCheckout(
                        branch: "master",
                        url: "https://github.com/ravisenevirathne/DevOps-CICD-Jenkins-Shared-Lib-SonarQube-Trivy.git"
                    )
                   
                }
            }
        }

        stage('Create EKS Cluster : Terraform'){
            when { expression {  params.action == 'create' } }
            environment{
                AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
                AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_KEY_ID')
                }
            steps{
                script{

                    dir('eks_module') {
                
                        sh "terraform init -upgrade"
                        sh "terraform -version"
                        sh "aws s3 ls"
                        sh "terraform plan -var 'access_key=$AWS_ACCESS_KEY_ID' -var 'secret_key=$AWS_SECRET_ACCESS_KEY' --var-file=./config/terraform.tfvars"
                        sh "terraform apply -var 'access_key=$AWS_ACCESS_KEY_ID' -var 'secret_key=$AWS_SECRET_ACCESS_KEY' --var-file=./config/terraform.tfvars --auto-approve"
                        //sh "terraform plan"
                  }
                }
            }
        }

        stage('Connect to EKS '){
            when { expression {  params.action == 'create' } }
        environment{
                AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
                AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_KEY_ID')
        }
        steps{
            script{
                sh """
                aws configure set access_key "$AWS_ACCESS_KEY_ID"
                aws configure set access_key "$AWS_SECRET_ACCESS_KEY"
                aws configure set region "${params.Region}"
                aws eks update-kubeconfig --name ${params.cluster}
                """
                sh "aws Login successful"
            }
        }
        } 

        stage('Deployment on EKS Cluster'){
            when { expression {  params.action == 'create' } }
        steps{
                script{
                  
                  def apply = false

                  try{
                    input message: 'please confirm to deploy on eks', ok: 'Ready to apply the config ?'
                    apply = true
                  }catch(err){
                    apply= false
                    currentBuild.result  = 'UNSTABLE'
                  }
                  if(apply){

                    sh """
                      kubectl apply -f deployment.yaml
                    """
                  }
                }
            }
        }   

        stage('Delete EKS Cluster : Terraform'){
            when { expression {  params.action == 'delete' } }
            environment{
                AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
                AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_KEY_ID')
                }
            steps{
                script{

                    dir('eks_module') {

                        sh "terraform init"
                        sh "terraform destroy -var 'access_key=$AWS_ACCESS_KEY_ID' -var 'secret_key=$AWS_SECRET_ACCESS_KEY' --var-file=./config/terraform.tfvars --auto-approve"
                  }
                }
            }
        }


    }

}

